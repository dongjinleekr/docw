#!/usr/bin/env bash

# The docw command script

# initialize env
BASE_DIR=$(dirname $(dirname $(readlink -f $0)))
. ${BASE_DIR}/common.sh

print_usage() {
  echo ""
  echo "Usage: docw [<command>] [<options>]"
  echo ""
  echo "  where command is one of:"
  echo "    ls                   display current status"
  echo "    mknode               create node"
  echo "    mknodes              create node(s)"
  echo "    mkcluster            create cluster"
  echo "    format               format node(s)"
  echo "    set                  configure node(s)"
  echo "    rm                   remove node(s)"
  echo ""
  echo "  All commands print help when invoked without parameters"
  echo ""
}

print_ls_usage() {
  echo ""
  echo "Usage: docw ls [<options>]"
  echo ""
  echo "  where options are one of:"
  echo "    <cluster>            display <cluster>'s information."
  echo "    --all                display all clusters' and nodes' information."
  echo ""
}

print_mknode_usage() {
  echo ""
  echo "Usage: docw mknode <size>    create a single node whose core count is <size>"
  echo "                             hostnames are assigned automatically"
  echo ""
  echo "  For details on <size>, please refer https://www.digitalocean.com/pricing/"
  echo ""
}

print_mknodes_usage() {
  echo ""
  echo "Usage: docw mknodes <size> <count>     create <count> nodes with <size> cores at once"
  echo "                                       hostnames are assigned automatically"
  echo ""
  echo "  For details on <size>, please refer https://www.digitalocean.com/pricing/"
  echo ""
}

print_mkcluster_usage() {
  echo ""
  echo "Usage: docw mkcluster <name> <role> <hostname>*    create cluster <name> with given set of hosts"
  echo ""
  echo "  where role are one of:"
  echo "    hadoop                   setup hadoop cluster. namenode hostname should be given as an option"
  echo "                             The first specified host becomes namenode"
  echo ""
}

print_format_usage() {
  echo ""
  echo "Usage: docw format [<options>]"
  echo ""
  echo "  where options are one of:"
  echo "    <hostname>*              format all given nodes."
  echo ""
  echo "  The format process includes:"
  echo "    1. configure given node's root password."
  echo "    2. Add the node to /etc/hosts."
  echo "    3. setup password-less login with the node."
  echo ""
}

print_rm_usage() {
  echo ""
  echo "Usage: docw rm [<options>]"
  echo ""
  echo "  where options are one of:"
  echo "    cluster <clustername>    remove all nodes that belongs to <clustername>."
  echo ""
}

make_node() {
	[ "$#" -eq 2 ] || return 1
	
	HOSTNAME=$1
	SIZE=$2
	
	return 0
}

make_nodes() {
	[ "$#" -eq 2 ] || return 1
	
	SIZE=$1
	NODECOUNT=$2

	ID_START=$(cat ${ID_SEQUENCE_PATH})
	ID_END=$((${ID_START} + ${NODECOUNT} - 1))
	ID_NEXT=$((${ID_END} + 1))
	
	echo ${ID_NEXT} > ${ID_SEQUENCE_PATH}

	PID_LIST=""
	for I in $(seq ${ID_START} ${ID_END})
	do
		HOSTNAME=$(printf ${HOSTNAME_PREFIX} ${I})
		add_host ${HOSTNAME} ${SIZE} &
	PID_LIST=${PID_LIST}' '$!
	done
	
	wait_all ${PID_LIST}

	return 0
}

setup_hadoop_cluster() {
	[ "$#" -eq 2 ] || return 1
	
	CLUSTER_NAME=$1
	MASTER_HOSTNAME=$2
	
	configure_hadoop_slave_all ${CLUSTER_NAME} ${MASTER_HOSTNAME}
	configure_hadoop_master ${CLUSTER_NAME} ${MASTER_HOSTNAME}
	
	return 0
}

process_ls() {

	case $1 in
		"--all")
			display_all_clusters_info
		
			RETVAL=$?
			[ "${RETVAL}" -eq 0 ] && return 0
			;;
		"")
			print_ls_usage
			return 0
			;;
		*)
			CLUSTER_NAME=$1
			display_cluster_info ${CLUSTER_NAME}
			
			RETVAL=$?
			[ "${RETVAL}" -eq 0 ] && return 0
			;;
	esac
	
	return 1
}

process_format() {
	
	case $1 in
		"--all")
			echo 'not implemented yet'
			;;
		"")
			print_format_usage
			return 0
			;;
		*)
			for HOSTNAME in $@
			do
				assign_ip_address ${HOSTNAME}
			done
			
			install_necessary_packages $@
	
			return 0
			;;
	esac
}

case $1 in
  ""|-h)
		print_usage
		exit 0
		;;
	ls)
		shift 1
		process_ls $@
		
		RETVAL=$?
		if [ "${RETVAL}" -eq 0 ]; then
			exit 0
		else
			exit 1
		fi
		;;
	mknode)
		shift 1
		if [ "$#" -eq 0 ]; then
			print_mknode_usage
			exit 0
		else
			make_node $@
	
			RETVAL=$?
			if [ "${RETVAL}" -eq 0 ]; then
				exit 0
			else
				exit 1
			fi
		fi
		;;
	mknodes)
		shift 1
		if [ "$#" -eq 0 ]; then
			print_mknodes_usage
			exit 0
		else
			make_nodes $@
	
			RETVAL=$?
			if [ "${RETVAL}" -eq 0 ]; then
				exit 0
			else
				exit 1
			fi
		fi
		;;
	mkcluster)
		shift 1
		if [ "$#" -eq 0 ]; then
			print_mkcluster_usage
			exit 0
		else
			# todo: input validation
			
			CLUSTER_NAME=$1
			ROLE=$2
			MASTER_HOSTNAME=$3
		
			add_cluster ${CLUSTER_NAME} ${ROLE}
		
			shift 2
			for HOSTNAME in $@
			do
				assign_to_namespace ${CLUSTER_NAME} ${HOSTNAME}
				assign_to_cluster ${CLUSTER_NAME} ${HOSTNAME}
				update_namespace_hosts ${CLUSTER_NAME}
			done
		
			case ${ROLE} in
				hadoop)
					setup_hadoop_cluster ${CLUSTER_NAME} ${MASTER_HOSTNAME}
		
					RETVAL=$?
					if [ "${RETVAL}" -eq 0 ]; then
						exit 0
					else
						exit 1
					fi
					;;
				*)
					exit 1
					;;
			esac
		fi
		;;
	format)
		shift 1
		process_format $@
		
		RETVAL=$?
		if [ "${RETVAL}" -eq 0 ]; then
			exit 0
		else
			exit 1
		fi
		;;
	rmcluster)
		shift 1
		if [ "$#" -eq 0 ]; then
			print_rmcluster_usage
			exit 0
		else
			rm_cluster $@
	
			RETVAL=$?
			if [ "${RETVAL}" -eq 0 ]; then
				exit 0
			else
				exit 1
			fi
		fi
		;;
	*)
		print_usage 1>&2
		exit 1
		;;
esac
