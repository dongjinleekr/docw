#!/usr/bin/env bash

# The docw command script

# initialize env
BASE_DIR=$(dirname $(dirname $(readlink -f $0)))
. ${BASE_DIR}/common.sh

print_usage() {
  echo "Usage: docw [<command>] [<options>]"
  echo "where command is one of:"
  echo "  make                 create node(s)"
  echo "  rm                   remove node(s)"
  echo "All commands print help when invoked without parameters, or with -h"
}

print_make_usage() {
  echo "Usage: docw make [<options>]"
  echo "where options are one of:"
  echo "  node <hostname> <size>   create node sized <size> and named <hostname>"
  echo "  nodes <count> <size>     create <count> nodes at once, sized <size>. hostnames are assigned automatically."
  echo "<size> is specified by the number of cores of desired node size."
  echo "For details, please refer https://www.digitalocean.com/pricing/"
}

print_rm_usage() {
  echo "Usage: docw rm [<options>]"
  echo "where options are one of:"
  echo "  cluster <clustername>    remove all nodes that belongs to <clustername>."
}

make_node() {
	[ "$#" -eq 2 ] || return 1
	
	HOSTNAME=$1
	SIZE=$2
	
	return 0
}

make_nodes() {
	[ "$#" -eq 2 ] || return 1
	
	NODECOUNT=$1
	SIZE=$2

	ID_START=$(cat ${ID_SEQUENCE_PATH})
	ID_END=$((${ID_START} + ${NODECOUNT} - 1))
	ID_NEXT=$((${ID_END} + 1))
	
	echo ${ID_NEXT} > ${ID_SEQUENCE_PATH}

	PID_LIST=""
	for I in $(seq ${ID_START} ${ID_END})
	do
		HOSTNAME=$(printf ${HOSTNAME_PREFIX} ${I})
		create_node ${HOSTNAME} ${SIZE} &
	PID_LIST=${PID_LIST}' '$!
	done
	
	wait_all ${PID_LIST}

	return 0
}

rm_cluster() {
	[ "$#" -eq 1 ] || return 1
	
	CLUSTER_NAME=$1
	
	unregister_and_destroy_cluster ${CLUSTER_NAME}
	
	return 0
}

process_make() {
	COMMAND=$1
	shift 1
	
	case $COMMAND in
		node)
			make_node $@
		
			RETVAL=$?
			[ "${RETVAL}" -eq 0 ] && return 0
			;;
		nodes)
			make_nodes $@
		
			RETVAL=$?
			[ "${RETVAL}" -eq 0 ] && return 0
			;;
		"")
			print_make_usage
			return 0
			;;
		-h)
			print_make_usage
			return 0
			;;
		*)
			return 1
			;;
	esac
}

process_rm() {
	COMMAND=$1
	shift 1
	
	case $COMMAND in
		cluster)
			rm_cluster $@
		
			RETVAL=$?
			[ "${RETVAL}" -eq 0 ] && return 0
			;;
		"")
			print_rm_usage
			return 0
			;;
		-h)
			print_rm_usage
			return 0
			;;
		*)
			return 1
			;;
	esac
}

case $1 in
  "")
		print_usage
		exit 0
		;;
	-h)
		print_usage
		exit 0
		;;
	make)
		shift 1
		process_make $@
		
		RETVAL=$?
		[ "${RETVAL}" -eq 0 ] && exit 0
		;;
	rm)
		shift 1
		process_rm $@
		
		RETVAL=$?
		[ "${RETVAL}" -eq 0 ] && exit 0
		;;
	*)
		print_usage 1>&2
		exit 1
		;;
esac
